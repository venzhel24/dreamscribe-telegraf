import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Job } from 'bullmq';
import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { TelegramSenderService } from '../services/telegram-sender.service';

interface TranscriptionResult {
  text: string;
  userId: number;
  messageId: number;
}

@Processor('transcription_results')
@Injectable()
export class TranscriptionResultConsumer extends WorkerHost {
  constructor(private readonly telegramSender: TelegramSenderService) {
    super();
  }

  async process(job: Job<TranscriptionResult>): Promise<void> {
    const { text, userId } = job.data;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_transcript')],
      [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å', 'rewrite_transcript')],
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_transcript')],
    ]);

    await this.telegramSender.sendMessage(
      userId,
      `–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n${text}`,
      keyboard,
    );
  }
}
